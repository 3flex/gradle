/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.groovy

import org.gradle.integtests.fixtures.AbstractIntegrationSpec
import org.gradle.testing.fixture.GroovyCoverage

class GroovyDocStampsIntegrationTest extends AbstractIntegrationSpec {

    private static final String GROOVY_DOC_TIMESTAMP_PATTERN = /Generated by groovydoc \((.+?)\)/
    private static final String GROOVY_DOC_VERSION_PATTERN = /Generated by groovydoc .* on /

    private def buildScriptWithGroovyDependency(String groovyVersion) {
        buildFile << """
        plugins {
            id("groovy")
        }

        ${mavenCentralRepository()}

        dependencies {
            implementation "org.codehaus.groovy:groovy:${groovyVersion}"
        }
        """

        file("src/main/groovy/pkg/Thing.groovy") << """
        package pkg

        class Thing {}
        """
    }

    def "time and version stamp can be enabled"() {
        given:
        buildScriptWithGroovyDependency(version)

        when:
        buildFile << """
            groovydoc {
              noTimestamp = false
              noVersionStamp = false
            }
        """

        run "groovydoc"

        then:
        def text = file('build/docs/groovydoc/pkg/Thing.html').text
        text =~ GROOVY_DOC_TIMESTAMP_PATTERN
        text =~ GROOVY_DOC_VERSION_PATTERN

        where:
        version << GroovyCoverage.SUPPORTS_TIMESTAMP
    }

    def "time and version stamps are disabled by default"() {
        given:
        buildScriptWithGroovyDependency(version)

        when:
        run "groovydoc"

        then:
        def text = file('build/docs/groovydoc/pkg/Thing.html').text
        !(text =~ GROOVY_DOC_TIMESTAMP_PATTERN)
        !(text =~ GROOVY_DOC_VERSION_PATTERN)

        where:
        version << GroovyCoverage.SUPPORTS_TIMESTAMP
    }

}
